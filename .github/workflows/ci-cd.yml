name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/long-term-investments ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Code formatting check (Black)
      run: black --check --diff .
      continue-on-error: true
    
    - name: Import sorting check (isort)  
      run: isort --check-only --diff .
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Security check with bandit
      run: bandit -r . -x tests/,venv/
      continue-on-error: true
    
    - name: Check dependencies for security issues
      run: safety check
      continue-on-error: true

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres_test_password
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-django
    
    - name: Set up environment
      run: |
        cp .env.example .env
        echo "DATABASE_HOST=localhost" >> .env
        echo "DATABASE_PORT=5432" >> .env
        echo "DATABASE_NAME=test_db" >> .env
        echo "DATABASE_USER=postgres" >> .env
        echo "DATABASE_PASSWORD=postgres_test_password" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "USE_FILE_LOGGING=False" >> .env
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        echo "PostgreSQL is ready!"
    
    - name: Test database connection
      run: |
        PGPASSWORD=postgres_test_password psql -h localhost -U postgres -d test_db -c "SELECT version();"
    
    - name: Run migrations
      run: python manage.py migrate --settings=gpw_advisor.settings
    
    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test --settings=gpw_advisor.settings
        coverage report
        coverage xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Docker Build & Push
  build:
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify registry access
      run: |
        echo "Testing access to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Actor: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "Add your deployment script/commands"
        # Example deployment commands:
        # - SSH to production server
        # - Pull latest Docker images
        # - Update docker-compose configuration
        # - Restart services
        # - Run health checks
    
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
