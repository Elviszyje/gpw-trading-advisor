# Generated by Django 5.2 on 2025-07-21 15:21

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="TechnicalIndicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "indicator_type",
                    models.CharField(
                        choices=[
                            ("sma", "Simple Moving Average"),
                            ("ema", "Exponential Moving Average"),
                            ("rsi", "Relative Strength Index"),
                            ("macd", "MACD"),
                            ("bollinger", "Bollinger Bands"),
                            ("stochastic", "Stochastic Oscillator"),
                            ("williams_r", "Williams %R"),
                            ("volume_sma", "Volume SMA"),
                            ("atr", "Average True Range"),
                            ("adx", "Average Directional Index"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "parameters",
                    models.JSONField(
                        default=dict,
                        help_text="Indicator parameters (e.g., {'period': 14, 'smoothing': 2})",
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True)),
                ("calculation_order", models.PositiveIntegerField(default=100)),
                (
                    "overbought_threshold",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Value above which indicator is considered overbought",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "oversold_threshold",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Value below which indicator is considered oversold",
                        max_digits=6,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Technical Indicator",
                "verbose_name_plural": "Technical Indicators",
                "db_table": "analysis_technical_indicator",
                "ordering": ["calculation_order", "name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MarketAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "market_sentiment",
                    models.CharField(
                        choices=[
                            ("very_bearish", "Very Bearish"),
                            ("bearish", "Bearish"),
                            ("neutral", "Neutral"),
                            ("bullish", "Bullish"),
                            ("very_bullish", "Very Bullish"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "sentiment_score",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Sentiment score (-100 to +100)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(-100),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("total_stocks_analyzed", models.PositiveIntegerField(default=0)),
                ("bullish_signals_count", models.PositiveIntegerField(default=0)),
                ("bearish_signals_count", models.PositiveIntegerField(default=0)),
                ("neutral_signals_count", models.PositiveIntegerField(default=0)),
                ("market_volume", models.BigIntegerField(blank=True, null=True)),
                (
                    "volume_trend",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("increasing", "Increasing"),
                            ("decreasing", "Decreasing"),
                            ("stable", "Stable"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "key_insights",
                    models.JSONField(
                        default=list, help_text="List of key market insights"
                    ),
                ),
                (
                    "top_gainers",
                    models.JSONField(default=list, help_text="Top gaining stocks"),
                ),
                (
                    "top_losers",
                    models.JSONField(default=list, help_text="Top losing stocks"),
                ),
                (
                    "most_active",
                    models.JSONField(
                        default=list, help_text="Most active stocks by volume"
                    ),
                ),
                ("analysis_version", models.CharField(default="1.0", max_length=20)),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "summary",
                    models.TextField(help_text="Human-readable market summary"),
                ),
                (
                    "trading_session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="market_analysis",
                        to="core.tradingsession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Market Analysis",
                "verbose_name_plural": "Market Analyses",
                "db_table": "analysis_market_analysis",
                "ordering": ["-trading_session__date"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="IndicatorValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Primary indicator value",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "value_upper",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Upper band/line (e.g., Bollinger upper)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "value_lower",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Lower band/line (e.g., Bollinger lower)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "value_signal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Signal line (e.g., MACD signal)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "calculation_source",
                    models.CharField(
                        default="system",
                        help_text="Source of calculation (system, manual, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="indicator_values",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "trading_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="indicator_values",
                        to="core.tradingsession",
                    ),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="analysis.technicalindicator",
                    ),
                ),
            ],
            options={
                "verbose_name": "Indicator Value",
                "verbose_name_plural": "Indicator Values",
                "db_table": "analysis_indicator_value",
                "ordering": ["-trading_session__date", "stock__symbol"],
                "indexes": [
                    models.Index(
                        fields=["stock", "trading_session"],
                        name="analysis_in_stock_i_357fa8_idx",
                    ),
                    models.Index(
                        fields=["indicator", "trading_session"],
                        name="analysis_in_indicat_c76664_idx",
                    ),
                ],
                "unique_together": {("indicator", "stock", "trading_session")},
            },
        ),
        migrations.CreateModel(
            name="TradingSignal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "signal_type",
                    models.CharField(
                        choices=[
                            ("buy", "Buy"),
                            ("sell", "Sell"),
                            ("hold", "Hold"),
                            ("watch", "Watch"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "strength",
                    models.CharField(
                        choices=[
                            ("weak", "Weak"),
                            ("moderate", "Moderate"),
                            ("strong", "Strong"),
                            ("very_strong", "Very Strong"),
                        ],
                        max_length=15,
                    ),
                ),
                (
                    "confidence",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Confidence level (0-100%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "price_at_signal",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Stock price when signal was generated",
                        max_digits=10,
                    ),
                ),
                (
                    "target_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Target price for the signal",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "stop_loss_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Suggested stop loss price",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "analysis_details",
                    models.JSONField(
                        default=dict, help_text="Detailed analysis data and reasoning"
                    ),
                ),
                (
                    "generated_by",
                    models.CharField(
                        default="system",
                        help_text="Who/what generated this signal",
                        max_length=100,
                    ),
                ),
                ("is_automatic", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("is_sent", models.BooleanField(default=False)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                (
                    "actual_outcome",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("profitable", "Profitable"),
                            ("loss", "Loss"),
                            ("break_even", "Break Even"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "outcome_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Price at which signal was acted upon or expired",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("outcome_date", models.DateTimeField(blank=True, null=True)),
                (
                    "indicators_used",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Technical indicators that contributed to this signal",
                        to="analysis.technicalindicator",
                    ),
                ),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trading_signals",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "trading_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trading_signals",
                        to="core.tradingsession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trading Signal",
                "verbose_name_plural": "Trading Signals",
                "db_table": "analysis_trading_signal",
                "ordering": ["-created_at"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["stock", "signal_type", "created_at"],
                        name="analysis_tr_stock_i_507f9e_idx",
                    ),
                    models.Index(
                        fields=["trading_session", "signal_type"],
                        name="analysis_tr_trading_5f3e4b_idx",
                    ),
                    models.Index(
                        fields=["is_sent", "created_at"],
                        name="analysis_tr_is_sent_1d472f_idx",
                    ),
                ],
            },
        ),
    ]
