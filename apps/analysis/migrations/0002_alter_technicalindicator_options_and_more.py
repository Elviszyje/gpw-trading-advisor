# Generated by Django 5.2 on 2025-07-22 21:17

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("analysis", "0001_initial"),
        ("core", "0005_scrapingschedule_scrapingexecution"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="technicalindicator",
            options={"ordering": ["-created_at"]},
        ),
        migrations.AlterModelTable(
            name="technicalindicator",
            table="analysis_technical_indicators",
        ),
        migrations.CreateModel(
            name="AnomalyAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "anomaly_type",
                    models.CharField(
                        choices=[
                            ("price_spike", "Price Spike"),
                            ("price_drop", "Price Drop"),
                            ("volume_spike", "Volume Spike"),
                            ("pattern_break", "Pattern Break"),
                            ("sector_divergence", "Sector Divergence"),
                            ("support_break", "Support Level Break"),
                            ("resistance_break", "Resistance Level Break"),
                            ("unusual_activity", "Unusual Trading Activity"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.IntegerField(
                        choices=[
                            (1, "Very Low"),
                            (2, "Low"),
                            (3, "Medium"),
                            (4, "High"),
                            (5, "Very High"),
                        ],
                        default=3,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="AI confidence in anomaly detection (0-1)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Human-readable description of the anomaly"
                    ),
                ),
                (
                    "detection_details",
                    models.JSONField(
                        default=dict,
                        help_text="Technical details about the anomaly detection",
                    ),
                ),
                (
                    "price_change_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Price change percentage",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "volume_ratio",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Volume vs average volume ratio",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "z_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Statistical Z-score of the anomaly",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "is_acknowledged",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the alert has been acknowledged by user",
                    ),
                ),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                (
                    "is_false_positive",
                    models.BooleanField(
                        default=False,
                        help_text="Marked as false positive for ML training",
                    ),
                ),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anomaly_alerts",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "trading_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anomaly_alerts",
                        to="core.tradingsession",
                    ),
                ),
            ],
            options={
                "db_table": "analysis_anomaly_alerts",
                "ordering": ["-created_at"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["stock", "anomaly_type"],
                        name="analysis_an_stock_i_230259_idx",
                    ),
                    models.Index(
                        fields=["severity", "created_at"],
                        name="analysis_an_severit_d545fa_idx",
                    ),
                    models.Index(
                        fields=["is_acknowledged", "created_at"],
                        name="analysis_an_is_ackn_4be448_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PatternDetection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "pattern_type",
                    models.CharField(
                        choices=[
                            ("head_shoulders", "Head and Shoulders"),
                            ("inverse_head_shoulders", "Inverse Head and Shoulders"),
                            ("double_top", "Double Top"),
                            ("double_bottom", "Double Bottom"),
                            ("triple_top", "Triple Top"),
                            ("triple_bottom", "Triple Bottom"),
                            ("ascending_triangle", "Ascending Triangle"),
                            ("descending_triangle", "Descending Triangle"),
                            ("symmetrical_triangle", "Symmetrical Triangle"),
                            ("flag", "Flag"),
                            ("pennant", "Pennant"),
                            ("wedge", "Wedge"),
                            ("doji", "Doji"),
                            ("hammer", "Hammer"),
                            ("shooting_star", "Shooting Star"),
                            ("engulfing", "Engulfing"),
                            ("morning_star", "Morning Star"),
                            ("evening_star", "Evening Star"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "pattern_category",
                    models.CharField(
                        choices=[
                            ("reversal", "Reversal"),
                            ("continuation", "Continuation"),
                            ("candlestick", "Candlestick"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Pattern detection confidence (0-1)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "pattern_start_date",
                    models.DateField(help_text="When the pattern started forming"),
                ),
                (
                    "pattern_completion_date",
                    models.DateField(
                        blank=True,
                        help_text="When the pattern was completed",
                        null=True,
                    ),
                ),
                (
                    "is_completed",
                    models.BooleanField(
                        default=False, help_text="Whether the pattern is fully formed"
                    ),
                ),
                (
                    "pattern_details",
                    models.JSONField(
                        default=dict, help_text="Technical details about the pattern"
                    ),
                ),
                (
                    "pattern_height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Pattern height (for target calculation)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "breakout_target",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Calculated breakout target price",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "stop_loss_level",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Suggested stop loss level",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "was_successful",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the pattern played out as expected",
                        null=True,
                    ),
                ),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pattern_detections",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "trading_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pattern_detections",
                        to="core.tradingsession",
                    ),
                ),
            ],
            options={
                "db_table": "analysis_pattern_detections",
                "ordering": ["-created_at"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["stock", "pattern_type"],
                        name="analysis_pa_stock_i_cd991e_idx",
                    ),
                    models.Index(
                        fields=["pattern_category", "is_completed"],
                        name="analysis_pa_pattern_cd252a_idx",
                    ),
                    models.Index(
                        fields=["confidence_score", "created_at"],
                        name="analysis_pa_confide_cf858a_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PricePrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "prediction_type",
                    models.CharField(
                        choices=[
                            ("next_day", "Next Day"),
                            ("next_week", "Next Week"),
                            ("next_month", "Next Month"),
                        ],
                        default="next_day",
                        max_length=20,
                    ),
                ),
                (
                    "predicted_direction",
                    models.CharField(
                        choices=[
                            ("up", "Up"),
                            ("down", "Down"),
                            ("sideways", "Sideways"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Model confidence in prediction (0-1)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "predicted_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Predicted price value",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "price_range_low",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Lower bound of predicted price range",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "price_range_high",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Upper bound of predicted price range",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "model_version",
                    models.CharField(
                        help_text="Version of ML model used for prediction",
                        max_length=50,
                    ),
                ),
                (
                    "features_used",
                    models.JSONField(
                        default=list, help_text="List of features used in prediction"
                    ),
                ),
                (
                    "prediction_details",
                    models.JSONField(
                        default=dict, help_text="Additional prediction metadata"
                    ),
                ),
                (
                    "actual_direction",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("up", "Up"),
                            ("down", "Down"),
                            ("sideways", "Sideways"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "actual_price",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=12, null=True
                    ),
                ),
                (
                    "is_correct",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the prediction was correct",
                        null=True,
                    ),
                ),
                (
                    "prediction_error",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Absolute prediction error",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_predictions",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "trading_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_predictions",
                        to="core.tradingsession",
                    ),
                ),
            ],
            options={
                "db_table": "analysis_price_predictions",
                "ordering": ["-created_at"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["stock", "prediction_type"],
                        name="analysis_pr_stock_i_7c06c1_idx",
                    ),
                    models.Index(
                        fields=["predicted_direction", "confidence_score"],
                        name="analysis_pr_predict_120b72_idx",
                    ),
                    models.Index(
                        fields=["is_correct", "created_at"],
                        name="analysis_pr_is_corr_c6c75a_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RiskAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "overall_risk_level",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "overall_risk_score",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Overall risk score (0-10)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "volatility_risk",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "liquidity_risk",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "market_risk",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "sector_risk",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "beta_coefficient",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Beta coefficient vs market",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "var_1_day",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="1-day Value at Risk (95%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "var_1_week",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="1-week Value at Risk (95%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "max_drawdown",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Maximum drawdown percentage",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "risk_analysis_details",
                    models.JSONField(
                        default=dict, help_text="Detailed risk analysis data"
                    ),
                ),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assessments",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "trading_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assessments",
                        to="core.tradingsession",
                    ),
                ),
            ],
            options={
                "db_table": "analysis_risk_assessments",
                "ordering": ["-created_at"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["stock", "overall_risk_level"],
                        name="analysis_ri_stock_i_830a0e_idx",
                    ),
                    models.Index(
                        fields=["overall_risk_score", "created_at"],
                        name="analysis_ri_overall_3605af_idx",
                    ),
                ],
            },
        ),
    ]
