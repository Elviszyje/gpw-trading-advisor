# Generated by Django 5.2 on 2025-08-15 17:59

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("analysis", "0004_timeweightconfiguration"),
        ("core", "0006_stocksymbol_bankier_symbol"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="InvestmentRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("strong_buy", "Strong Buy"),
                            ("buy", "Buy"),
                            ("hold", "Hold"),
                            ("sell", "Sell"),
                            ("avoid", "Avoid"),
                        ],
                        help_text="Investment recommendation",
                        max_length=15,
                    ),
                ),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("fundamental", "Fundamental Analysis"),
                            ("technical", "Technical Analysis"),
                            ("quantitative", "Quantitative Analysis"),
                            ("mixed", "Mixed Analysis"),
                        ],
                        default="mixed",
                        help_text="Type of analysis performed",
                        max_length=15,
                    ),
                ),
                (
                    "current_price",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Current stock price at recommendation time",
                        max_digits=10,
                    ),
                ),
                (
                    "target_price_6m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="6-month price target",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "target_price_12m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="12-month price target",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "target_price_24m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="24-month price target",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        help_text="Recommendation confidence (0-100%)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "risk_score",
                    models.FloatField(
                        help_text="Investment risk score (0-10)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "volatility_estimate",
                    models.FloatField(
                        blank=True,
                        help_text="Expected annual volatility (%)",
                        null=True,
                    ),
                ),
                ("pe_ratio", models.FloatField(blank=True, null=True)),
                ("peg_ratio", models.FloatField(blank=True, null=True)),
                ("price_to_book", models.FloatField(blank=True, null=True)),
                ("debt_to_equity", models.FloatField(blank=True, null=True)),
                (
                    "roe",
                    models.FloatField(
                        blank=True, help_text="Return on Equity", null=True
                    ),
                ),
                ("revenue_growth_1y", models.FloatField(blank=True, null=True)),
                ("earnings_growth_1y", models.FloatField(blank=True, null=True)),
                ("dividend_yield", models.FloatField(blank=True, null=True)),
                ("dividend_growth_rate", models.FloatField(blank=True, null=True)),
                ("payout_ratio", models.FloatField(blank=True, null=True)),
                (
                    "trend_direction",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("bullish", "Bullish"),
                            ("bearish", "Bearish"),
                            ("neutral", "Neutral"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "support_level",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Key support level",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "resistance_level",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Key resistance level",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "fundamental_analysis",
                    models.JSONField(
                        default=dict, help_text="Detailed fundamental analysis data"
                    ),
                ),
                (
                    "technical_analysis",
                    models.JSONField(
                        default=dict, help_text="Detailed technical analysis data"
                    ),
                ),
                (
                    "risk_factors",
                    models.JSONField(
                        default=list, help_text="List of key risk factors"
                    ),
                ),
                (
                    "investment_thesis",
                    models.TextField(help_text="Investment thesis and reasoning"),
                ),
                ("analyst_notes", models.TextField(blank=True)),
                (
                    "investment_horizon_months",
                    models.IntegerField(
                        default=12, help_text="Recommended investment horizon in months"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("recommendation_date", models.DateField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="investment_recommendations",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="investment_recommendations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Investment Recommendation",
                "verbose_name_plural": "Investment Recommendations",
                "db_table": "analysis_investment_recommendation",
                "ordering": ["-recommendation_date"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["user", "recommendation_type", "recommendation_date"],
                        name="analysis_in_user_id_2faaf0_idx",
                    ),
                    models.Index(
                        fields=["stock", "recommendation_type", "is_active"],
                        name="analysis_in_stock_i_78c723_idx",
                    ),
                    models.Index(
                        fields=["confidence_score", "risk_score"],
                        name="analysis_in_confide_edccd4_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PortfolioAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("analysis_date", models.DateField(auto_now_add=True)),
                (
                    "total_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total portfolio value in PLN",
                        max_digits=15,
                    ),
                ),
                (
                    "cash_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Cash holdings in PLN",
                        max_digits=15,
                    ),
                ),
                (
                    "invested_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount invested in stocks",
                        max_digits=15,
                    ),
                ),
                (
                    "number_of_positions",
                    models.IntegerField(help_text="Number of stock positions"),
                ),
                (
                    "stock_allocations",
                    models.JSONField(
                        default=dict,
                        help_text="Stock allocations: {symbol: {shares, value, percentage}}",
                    ),
                ),
                (
                    "sector_allocations",
                    models.JSONField(
                        default=dict,
                        help_text="Sector allocations: {sector: percentage}",
                    ),
                ),
                (
                    "market_cap_allocations",
                    models.JSONField(
                        default=dict,
                        help_text="Market cap allocations: {large/mid/small: percentage}",
                    ),
                ),
                (
                    "portfolio_return_1m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="1-month portfolio return (%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "portfolio_return_3m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="3-month portfolio return (%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "portfolio_return_6m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="6-month portfolio return (%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "portfolio_return_12m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="12-month portfolio return (%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "portfolio_return_ytd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Year-to-date return (%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "portfolio_volatility",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Portfolio volatility (annualized %)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "portfolio_beta",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Portfolio beta vs benchmark",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "sharpe_ratio",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Sharpe ratio",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "max_drawdown",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Maximum drawdown (%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "var_95",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Value at Risk 95% confidence",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "diversification_score",
                    models.FloatField(
                        blank=True,
                        help_text="Diversification score (0-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "concentration_risk",
                    models.FloatField(
                        blank=True, help_text="Concentration risk score", null=True
                    ),
                ),
                (
                    "correlation_score",
                    models.FloatField(
                        blank=True,
                        help_text="Average correlation between holdings",
                        null=True,
                    ),
                ),
                (
                    "benchmark_symbol",
                    models.CharField(
                        default="WIG20",
                        help_text="Benchmark index symbol",
                        max_length=10,
                    ),
                ),
                (
                    "benchmark_return_1m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Benchmark 1-month return (%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "benchmark_return_12m",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Benchmark 12-month return (%)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "alpha",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Portfolio alpha vs benchmark",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "rebalancing_needed",
                    models.BooleanField(
                        default=False, help_text="Portfolio needs rebalancing"
                    ),
                ),
                (
                    "rebalancing_suggestions",
                    models.JSONField(
                        default=list, help_text="Specific rebalancing recommendations"
                    ),
                ),
                (
                    "new_positions_suggested",
                    models.JSONField(
                        default=list, help_text="Suggested new positions to add"
                    ),
                ),
                (
                    "positions_to_reduce",
                    models.JSONField(
                        default=list, help_text="Positions to reduce or close"
                    ),
                ),
                (
                    "risk_alerts",
                    models.JSONField(
                        default=list, help_text="Risk-related alerts and warnings"
                    ),
                ),
                (
                    "overall_score",
                    models.FloatField(
                        blank=True,
                        help_text="Overall portfolio score (0-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "analysis_summary",
                    models.TextField(help_text="Human-readable analysis summary"),
                ),
                (
                    "key_insights",
                    models.JSONField(
                        default=list,
                        help_text="Key portfolio insights and recommendations",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_analyses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Portfolio Analysis",
                "verbose_name_plural": "Portfolio Analyses",
                "db_table": "analysis_portfolio_analysis",
                "ordering": ["-analysis_date"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["user", "analysis_date"],
                        name="analysis_po_user_id_cc5620_idx",
                    ),
                    models.Index(
                        fields=["overall_score", "analysis_date"],
                        name="analysis_po_overall_889aac_idx",
                    ),
                ],
            },
        ),
    ]
