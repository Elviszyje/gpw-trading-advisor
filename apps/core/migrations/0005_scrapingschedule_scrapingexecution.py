# Generated by Django 5.2 on 2025-07-21 20:56

import datetime
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0004_industrysentiment_stocksentiment"),
    ]

    operations = [
        migrations.CreateModel(
            name="ScrapingSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this schedule", max_length=100
                    ),
                ),
                (
                    "scraper_type",
                    models.CharField(
                        choices=[
                            ("news_rss", "News RSS Feeds"),
                            ("stock_prices", "Stock Prices"),
                            ("calendar_events", "Calendar Events"),
                            ("espi_reports", "ESPI Reports"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "frequency_value",
                    models.IntegerField(
                        help_text="How often to run (1-1440)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1440),
                        ],
                    ),
                ),
                (
                    "frequency_unit",
                    models.CharField(
                        choices=[
                            ("minutes", "Minutes"),
                            ("hours", "Hours"),
                            ("days", "Days"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "active_hours_start",
                    models.TimeField(
                        default=datetime.time(8, 0),
                        help_text="Start of active hours (e.g., 08:00)",
                    ),
                ),
                (
                    "active_hours_end",
                    models.TimeField(
                        default=datetime.time(18, 0),
                        help_text="End of active hours (e.g., 18:00)",
                    ),
                ),
                ("monday", models.BooleanField(default=True)),
                ("tuesday", models.BooleanField(default=True)),
                ("wednesday", models.BooleanField(default=True)),
                ("thursday", models.BooleanField(default=True)),
                ("friday", models.BooleanField(default=True)),
                ("saturday", models.BooleanField(default=False)),
                ("sunday", models.BooleanField(default=False)),
                (
                    "skip_polish_holidays",
                    models.BooleanField(
                        default=True,
                        help_text="Skip execution on Polish public holidays",
                    ),
                ),
                (
                    "skip_gpw_holidays",
                    models.BooleanField(
                        default=True, help_text="Skip execution on GPW non-trading days"
                    ),
                ),
                ("max_retries", models.IntegerField(default=3)),
                ("retry_delay_minutes", models.IntegerField(default=5)),
                ("timeout_minutes", models.IntegerField(default=10)),
                (
                    "scraper_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional configuration specific to scraper type",
                    ),
                ),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("last_success", models.DateTimeField(blank=True, null=True)),
                ("next_run", models.DateTimeField(blank=True, null=True)),
                ("failure_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "core_scraping_schedules",
                "ordering": ["scraper_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="ScrapingExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("success", models.BooleanField(default=False)),
                ("items_processed", models.IntegerField(default=0)),
                ("items_created", models.IntegerField(default=0)),
                ("items_updated", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("execution_details", models.JSONField(blank=True, default=dict)),
                (
                    "schedule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="core.scrapingschedule",
                    ),
                ),
            ],
            options={
                "db_table": "core_scraping_executions",
                "ordering": ["-started_at"],
            },
        ),
    ]
