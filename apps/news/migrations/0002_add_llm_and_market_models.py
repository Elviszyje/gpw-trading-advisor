# Generated by Django 5.2 on 2025-07-21 20:19

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0002_add_llm_and_market_models"),
        ("news", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="NewsSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("url", models.URLField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("rss", "RSS Feed"),
                            ("html", "HTML Scraping"),
                            ("api", "API"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("scraping_config", models.JSONField(blank=True, default=dict)),
                ("last_scraped", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "news_sources",
            },
        ),
        migrations.CreateModel(
            name="NewsArticleModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                ("content", models.TextField()),
                ("url", models.URLField(unique=True)),
                (
                    "sentiment",
                    models.CharField(
                        choices=[
                            ("positive", "Positive"),
                            ("negative", "Negative"),
                            ("neutral", "Neutral"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=10,
                    ),
                ),
                (
                    "sentiment_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-1.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "market_impact",
                    models.CharField(
                        choices=[
                            ("high", "High Impact"),
                            ("medium", "Medium Impact"),
                            ("low", "Low Impact"),
                            ("unknown", "Unknown Impact"),
                        ],
                        default="unknown",
                        max_length=10,
                    ),
                ),
                (
                    "impact_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("keywords", models.JSONField(blank=True, default=list)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("published_date", models.DateTimeField()),
                ("scraped_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_analyzed", models.BooleanField(default=False)),
                ("analysis_date", models.DateTimeField(blank=True, null=True)),
                (
                    "mentioned_stocks",
                    models.ManyToManyField(
                        blank=True, related_name="news_mentions", to="core.stocksymbol"
                    ),
                ),
                (
                    "primary_stock",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_news",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="articles",
                        to="news.newssource",
                    ),
                ),
            ],
            options={
                "db_table": "news_articles",
                "ordering": ["-published_date"],
                "indexes": [
                    models.Index(
                        fields=["published_date"], name="news_articl_publish_212b7b_idx"
                    ),
                    models.Index(
                        fields=["sentiment"], name="news_articl_sentime_18983e_idx"
                    ),
                    models.Index(
                        fields=["market_impact"], name="news_articl_market__9ac705_idx"
                    ),
                    models.Index(
                        fields=["source"], name="news_articl_source__b953f8_idx"
                    ),
                ],
            },
        ),
    ]
