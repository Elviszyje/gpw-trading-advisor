# Generated by Django 5.2 on 2025-07-21 15:21

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("analysis", "0001_initial"),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="NotificationQueue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                ("is_processing", models.BooleanField(default=False)),
                ("processing_started_at", models.DateTimeField(blank=True, null=True)),
                ("worker_id", models.CharField(blank=True, max_length=100)),
                ("execute_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Notification Queue",
                "verbose_name_plural": "Notification Queue",
                "db_table": "notifications_queue",
                "ordering": ["priority", "execute_at"],
            },
        ),
        migrations.CreateModel(
            name="NotificationStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(unique=True)),
                ("emails_sent", models.PositiveIntegerField(default=0)),
                ("emails_failed", models.PositiveIntegerField(default=0)),
                ("emails_bounced", models.PositiveIntegerField(default=0)),
                ("emails_opened", models.PositiveIntegerField(default=0)),
                ("emails_clicked", models.PositiveIntegerField(default=0)),
                ("telegram_sent", models.PositiveIntegerField(default=0)),
                ("telegram_failed", models.PositiveIntegerField(default=0)),
                ("telegram_read", models.PositiveIntegerField(default=0)),
                ("daily_summaries_sent", models.PositiveIntegerField(default=0)),
                ("signal_alerts_sent", models.PositiveIntegerField(default=0)),
                ("price_alerts_sent", models.PositiveIntegerField(default=0)),
                ("system_alerts_sent", models.PositiveIntegerField(default=0)),
                ("avg_delivery_time_seconds", models.PositiveIntegerField(default=0)),
                (
                    "queue_processing_time_seconds",
                    models.PositiveIntegerField(default=0),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Notification Stats",
                "verbose_name_plural": "Notification Stats",
                "db_table": "notifications_stats",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="NotificationTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200)),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("email_daily_summary", "Email Daily Summary"),
                            ("email_signal_alert", "Email Signal Alert"),
                            ("email_price_alert", "Email Price Alert"),
                            ("telegram_daily_summary", "Telegram Daily Summary"),
                            ("telegram_signal_alert", "Telegram Signal Alert"),
                            ("telegram_price_alert", "Telegram Price Alert"),
                            ("email_welcome", "Email Welcome"),
                            ("email_subscription_expiry", "Email Subscription Expiry"),
                        ],
                        max_length=30,
                        unique=True,
                    ),
                ),
                (
                    "subject_template",
                    models.CharField(
                        help_text="Template for email subject or Telegram title",
                        max_length=300,
                    ),
                ),
                (
                    "content_template",
                    models.TextField(help_text="Template content with placeholders"),
                ),
                (
                    "available_variables",
                    models.JSONField(
                        default=list, help_text="List of available template variables"
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True)),
                (
                    "is_html",
                    models.BooleanField(
                        default=True, help_text="Whether template contains HTML"
                    ),
                ),
                ("usage_count", models.PositiveIntegerField(default=0)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Notification Template",
                "verbose_name_plural": "Notification Templates",
                "db_table": "notifications_template",
                "ordering": ["template_type"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("daily_summary", "Daily Summary"),
                            ("signal_alert", "Signal Alert"),
                            ("price_alert", "Price Alert"),
                            ("system_alert", "System Alert"),
                            ("welcome", "Welcome"),
                            ("subscription_expiry", "Subscription Expiry"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "delivery_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("telegram", "Telegram"),
                            ("both", "Both"),
                        ],
                        max_length=10,
                    ),
                ),
                ("subject", models.CharField(max_length=300)),
                ("content", models.TextField()),
                ("is_html", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sending", "Sending"),
                            ("sent", "Sent"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "scheduled_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("email_message_id", models.CharField(blank=True, max_length=200)),
                ("telegram_message_id", models.CharField(blank=True, max_length=100)),
                ("error_message", models.TextField(blank=True)),
                ("retry_count", models.PositiveIntegerField(default=0)),
                ("max_retries", models.PositiveIntegerField(default=3)),
                (
                    "context_data",
                    models.JSONField(default=dict, help_text="Template context data"),
                ),
                (
                    "related_signal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notifications",
                        to="analysis.tradingsignal",
                    ),
                ),
                (
                    "related_stock",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notifications",
                        to="core.stocksymbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "db_table": "notifications_notification",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
    ]
