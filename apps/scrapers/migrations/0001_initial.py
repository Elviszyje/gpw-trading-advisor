# Generated by Django 5.2 on 2025-07-21 15:21

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ScrapingSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("stooq", "Stooq.pl"),
                            ("gpw", "GPW Official"),
                            ("bankier", "Bankier.pl"),
                            ("money", "Money.pl"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("base_url", models.URLField()),
                ("is_enabled", models.BooleanField(db_index=True, default=True)),
                (
                    "scraping_interval",
                    models.PositiveIntegerField(
                        default=300, help_text="Scraping interval in seconds"
                    ),
                ),
                ("max_requests_per_minute", models.PositiveIntegerField(default=60)),
                ("timeout_seconds", models.PositiveIntegerField(default=30)),
                ("user_agent", models.TextField(blank=True)),
                ("headers", models.JSONField(blank=True, default=dict)),
                ("last_request_time", models.DateTimeField(blank=True, null=True)),
                ("requests_count", models.PositiveIntegerField(default=0)),
                (
                    "requests_reset_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("consecutive_errors", models.PositiveIntegerField(default=0)),
                ("last_error", models.TextField(blank=True)),
                ("last_error_time", models.DateTimeField(blank=True, null=True)),
                ("last_successful_scrape", models.DateTimeField(blank=True, null=True)),
                ("total_successful_requests", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Scraping Source",
                "verbose_name_plural": "Scraping Sources",
                "db_table": "scrapers_scraping_source",
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScrapingJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200)),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("stock_data", "Stock Data"),
                            ("stock_list", "Stock List"),
                            ("indices", "Market Indices"),
                            ("news", "News"),
                            ("fundamentals", "Fundamentals"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "url_template",
                    models.TextField(help_text="URL template with placeholders"),
                ),
                (
                    "css_selectors",
                    models.JSONField(
                        default=dict, help_text="CSS selectors for data extraction"
                    ),
                ),
                ("xpath_selectors", models.JSONField(blank=True, default=dict)),
                ("is_scheduled", models.BooleanField(default=True)),
                (
                    "schedule_interval",
                    models.PositiveIntegerField(
                        default=300, help_text="Interval in seconds between runs"
                    ),
                ),
                (
                    "next_run_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("last_run_time", models.DateTimeField(blank=True, null=True)),
                ("last_success_time", models.DateTimeField(blank=True, null=True)),
                ("last_error", models.TextField(blank=True)),
                ("total_runs", models.PositiveIntegerField(default=0)),
                ("successful_runs", models.PositiveIntegerField(default=0)),
                ("failed_runs", models.PositiveIntegerField(default=0)),
                (
                    "stock_symbol",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific stock to scrape (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="scrapers.scrapingsource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Scraping Job",
                "verbose_name_plural": "Scraping Jobs",
                "db_table": "scrapers_scraping_job",
                "ordering": ["-created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScrapingLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("debug", "Debug"),
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("message", models.TextField()),
                ("details", models.JSONField(blank=True, default=dict)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("url", models.URLField(blank=True)),
                ("response_status", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "response_time_ms",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("items_extracted", models.PositiveIntegerField(blank=True, null=True)),
                ("items_saved", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "job",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="scrapers.scrapingjob",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="scrapers.scrapingsource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Scraping Log",
                "verbose_name_plural": "Scraping Logs",
                "db_table": "scrapers_scraping_log",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["level", "timestamp"],
                        name="scrapers_sc_level_dd2ba2_idx",
                    ),
                    models.Index(
                        fields=["source", "timestamp"],
                        name="scrapers_sc_source__17e550_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StockData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "open_price",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "high_price",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "low_price",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "close_price",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                ("volume", models.BigIntegerField(blank=True, null=True)),
                (
                    "turnover",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                ("trades_count", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "price_change",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "price_change_percent",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                ("data_timestamp", models.DateTimeField()),
                ("scraped_at", models.DateTimeField(auto_now_add=True)),
                (
                    "raw_data",
                    models.JSONField(
                        default=dict, help_text="Raw scraped data for debugging"
                    ),
                ),
                ("is_validated", models.BooleanField(default=False)),
                ("validation_errors", models.JSONField(blank=True, default=list)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stock_data",
                        to="scrapers.scrapingsource",
                    ),
                ),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stock_data",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "trading_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stock_data",
                        to="core.tradingsession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stock Data",
                "verbose_name_plural": "Stock Data",
                "db_table": "scrapers_stock_data",
                "ordering": ["-trading_session__date", "stock__symbol"],
                "abstract": False,
                "unique_together": {("stock", "trading_session", "source")},
            },
        ),
    ]
