# Generated by Django 5.2 on 2025-07-21 18:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0001_initial"),
        ("scrapers", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CompanyCalendarEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("earnings", "Earnings Report"),
                            ("dividend", "Dividend Payment"),
                            ("ex_dividend", "Ex-Dividend Date"),
                            ("agm", "Annual General Meeting"),
                            ("conference", "Investor Conference"),
                            ("split", "Stock Split"),
                            ("merger", "Merger/Acquisition"),
                            ("ipo", "IPO/Listing"),
                            ("delisting", "Delisting"),
                            ("other", "Other Event"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("description", models.TextField(blank=True)),
                ("event_date", models.DateTimeField()),
                ("announcement_date", models.DateTimeField(blank=True, null=True)),
                (
                    "impact_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Impact"),
                            ("medium", "Medium Impact"),
                            ("high", "High Impact"),
                            ("critical", "Critical Impact"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("is_confirmed", models.BooleanField(default=False)),
                (
                    "dividend_amount",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                ("currency", models.CharField(default="PLN", max_length=3)),
                (
                    "estimated_eps",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Estimated earnings per share",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "actual_eps",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Actual earnings per share",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("source_url", models.URLField(blank=True)),
                ("source_name", models.CharField(blank=True, max_length=100)),
                (
                    "pre_event_price",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "post_event_price",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "price_impact_percent",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "stock_symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="calendar_events",
                        to="core.stocksymbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "Company Calendar Event",
                "verbose_name_plural": "Company Calendar Events",
                "db_table": "scrapers_company_calendar",
                "ordering": ["event_date"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["event_date"], name="scrapers_co_event_d_ba75d8_idx"
                    ),
                    models.Index(
                        fields=["stock_symbol", "event_date"],
                        name="scrapers_co_stock_s_f2429e_idx",
                    ),
                    models.Index(
                        fields=["event_type", "event_date"],
                        name="scrapers_co_event_t_75337b_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ESPIReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("espi", "ESPI - Current Report"),
                            ("ebi", "EBI - Periodic Report"),
                            ("rb", "RB - Quarterly Report"),
                            ("rs", "RS - Annual Report"),
                            ("other", "Other Report"),
                        ],
                        max_length=10,
                    ),
                ),
                ("report_number", models.CharField(max_length=50)),
                ("title", models.CharField(max_length=500)),
                ("content", models.TextField()),
                ("publication_date", models.DateTimeField()),
                ("effective_date", models.DateTimeField(blank=True, null=True)),
                (
                    "importance_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("categories", models.JSONField(blank=True, default=list)),
                ("keywords", models.JSONField(blank=True, default=list)),
                ("espi_url", models.URLField()),
                ("pdf_url", models.URLField(blank=True)),
                ("financial_data", models.JSONField(blank=True, default=dict)),
                ("key_metrics", models.JSONField(blank=True, default=dict)),
                (
                    "summary",
                    models.TextField(blank=True, help_text="AI-generated summary"),
                ),
                ("sentiment_analysis", models.JSONField(blank=True, default=dict)),
                ("market_impact_prediction", models.TextField(blank=True)),
                (
                    "price_before",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "price_after_1h",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "price_after_24h",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=10, null=True
                    ),
                ),
                (
                    "volume_impact",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "stock_symbol",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="espi_reports",
                        to="core.stocksymbol",
                    ),
                ),
            ],
            options={
                "verbose_name": "ESPI Report",
                "verbose_name_plural": "ESPI Reports",
                "db_table": "scrapers_espi_report",
                "ordering": ["-publication_date"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["publication_date"],
                        name="scrapers_es_publica_d73f08_idx",
                    ),
                    models.Index(
                        fields=["stock_symbol", "publication_date"],
                        name="scrapers_es_stock_s_32ab97_idx",
                    ),
                    models.Index(
                        fields=["report_type", "publication_date"],
                        name="scrapers_es_report__47ba57_idx",
                    ),
                ],
                "unique_together": {("stock_symbol", "report_number")},
            },
        ),
        migrations.CreateModel(
            name="NewsArticleModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("title", models.CharField(max_length=500)),
                ("summary", models.TextField(help_text="Article summary or excerpt")),
                ("content", models.TextField(help_text="Full article content")),
                ("url", models.URLField(help_text="Article URL", unique=True)),
                (
                    "published_date",
                    models.DateTimeField(help_text="Article publication date"),
                ),
                ("author", models.CharField(blank=True, max_length=200)),
                (
                    "source",
                    models.CharField(help_text="Source website name", max_length=100),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="Article tags/categories"
                    ),
                ),
                (
                    "stock_symbols",
                    models.JSONField(
                        blank=True, default=list, help_text="Related stock symbols"
                    ),
                ),
                (
                    "sentiment_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Sentiment score from -1 (negative) to +1 (positive)",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "sentiment_analysis",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detailed sentiment analysis results",
                    ),
                ),
                ("meta_description", models.TextField(blank=True)),
                ("meta_keywords", models.TextField(blank=True)),
                ("social_shares", models.PositiveIntegerField(default=0)),
                ("social_metrics", models.JSONField(blank=True, default=dict)),
                ("word_count", models.PositiveIntegerField(default=0)),
                ("reading_time_minutes", models.PositiveIntegerField(default=0)),
                ("scraped_at", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "scraping_source",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="news_articles",
                        to="scrapers.scrapingsource",
                    ),
                ),
            ],
            options={
                "verbose_name": "News Article",
                "verbose_name_plural": "News Articles",
                "db_table": "scrapers_news_article",
                "ordering": ["-published_date"],
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["published_date"], name="scrapers_ne_publish_fe5a39_idx"
                    ),
                    models.Index(
                        fields=["source", "published_date"],
                        name="scrapers_ne_source_f49ac6_idx",
                    ),
                    models.Index(
                        fields=["scraped_at"], name="scrapers_ne_scraped_fef6dd_idx"
                    ),
                ],
            },
        ),
    ]
