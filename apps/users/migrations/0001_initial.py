# Generated by Django 5.2 on 2025-07-21 15:21

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("premium", "Premium"),
                            ("pro", "Professional"),
                        ],
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="PLN", max_length=3)),
                (
                    "duration_days",
                    models.PositiveIntegerField(
                        help_text="Subscription duration in days"
                    ),
                ),
                (
                    "max_stocks_monitored",
                    models.PositiveIntegerField(
                        default=5,
                        help_text="Maximum number of stocks that can be monitored",
                    ),
                ),
                ("notifications_enabled", models.BooleanField(default=True)),
                ("telegram_notifications", models.BooleanField(default=False)),
                ("email_notifications", models.BooleanField(default=True)),
                ("advanced_analysis", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Subscription Plan",
                "verbose_name_plural": "Subscription Plans",
                "db_table": "users_subscription_plan",
                "ordering": ["price"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "telegram_chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Telegram chat ID for notifications",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="NotificationPreferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("email_enabled", models.BooleanField(default=True)),
                ("telegram_enabled", models.BooleanField(default=False)),
                ("daily_summary", models.BooleanField(default=True)),
                ("stock_alerts", models.BooleanField(default=True)),
                ("price_targets", models.BooleanField(default=True)),
                ("trend_changes", models.BooleanField(default=True)),
                ("volume_alerts", models.BooleanField(default=False)),
                ("summary_time", models.TimeField(default=datetime.time(8, 0))),
                ("quiet_hours_start", models.TimeField(default=datetime.time(22, 0))),
                ("quiet_hours_end", models.TimeField(default=datetime.time(8, 0))),
                ("weekend_notifications", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification Preferences",
                "verbose_name_plural": "Notification Preferences",
                "db_table": "users_notification_preferences",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("end_date", models.DateTimeField()),
                (
                    "subscription_type",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("premium", "Premium"),
                            ("pro", "Professional"),
                        ],
                        max_length=20,
                    ),
                ),
                ("auto_renew", models.BooleanField(default=False)),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("paid", "Paid"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="users.subscriptionplan",
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
                "db_table": "users_subscription",
                "ordering": ["-start_date"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserStockWatchlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "price_target_upper",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Alert when price goes above this value",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "price_target_lower",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Alert when price goes below this value",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "volume_threshold",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Alert when volume exceeds this threshold",
                        null=True,
                    ),
                ),
                ("track_technical_indicators", models.BooleanField(default=True)),
                ("track_volume_changes", models.BooleanField(default=False)),
                ("track_news_sentiment", models.BooleanField(default=False)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                (
                    "stock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="watchers",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="watchlist",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Stock Watchlist",
                "verbose_name_plural": "Stock Watchlists",
                "db_table": "users_stock_watchlist",
                "ordering": ["added_at"],
                "abstract": False,
                "unique_together": {("user", "stock")},
            },
        ),
    ]
