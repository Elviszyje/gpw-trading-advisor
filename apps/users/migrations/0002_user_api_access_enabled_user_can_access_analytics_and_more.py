# Generated by Django 5.2 on 2025-07-22 09:34

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0005_scrapingschedule_scrapingexecution"),
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="user",
            name="api_access_enabled",
            field=models.BooleanField(
                default=False, help_text="Can access REST API endpoints"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="can_access_analytics",
            field=models.BooleanField(
                default=True, help_text="Can access analytics dashboard"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="can_export_data",
            field=models.BooleanField(
                default=False, help_text="Can export analytics data"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="can_manage_alerts",
            field=models.BooleanField(
                default=True, help_text="Can create and manage custom alerts"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="company",
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AddField(
            model_name="user",
            name="dashboard_refresh_interval",
            field=models.IntegerField(
                default=300, help_text="Dashboard auto-refresh interval in seconds"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="default_analysis_period",
            field=models.IntegerField(
                default=7, help_text="Default period for analytics in days"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="email_notifications",
            field=models.BooleanField(
                default=True, help_text="Receive email notifications"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="full_name",
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AddField(
            model_name="user",
            name="impact_alert_threshold",
            field=models.FloatField(
                default=0.7, help_text="Impact threshold for alerts (0.1-1.0)"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="last_dashboard_access",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="user",
            name="last_login_ip",
            field=models.GenericIPAddressField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="user",
            name="login_count",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="user",
            name="onboarding_completed",
            field=models.BooleanField(
                default=False, help_text="Has user completed onboarding process"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="position",
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name="user",
            name="profile_completed",
            field=models.BooleanField(
                default=False, help_text="Has user completed their profile setup"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="sentiment_alert_threshold",
            field=models.FloatField(
                default=0.8, help_text="Sentiment threshold for alerts (0.1-1.0)"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="sms_notifications",
            field=models.BooleanField(
                default=False, help_text="Receive SMS notifications"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="timezone_preference",
            field=models.CharField(
                default="Europe/Warsaw",
                help_text="User's preferred timezone",
                max_length=50,
            ),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "license_number",
                    models.CharField(
                        blank=True,
                        help_text="Professional trading license number",
                        max_length=50,
                    ),
                ),
                (
                    "experience_years",
                    models.IntegerField(
                        blank=True,
                        help_text="Years of trading experience",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "investment_focus",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("growth", "Growth Stocks"),
                            ("value", "Value Investing"),
                            ("dividend", "Dividend Stocks"),
                            ("day_trading", "Day Trading"),
                            ("swing", "Swing Trading"),
                            ("long_term", "Long-term Investing"),
                            ("mixed", "Mixed Strategy"),
                        ],
                        help_text="Primary investment focus",
                        max_length=20,
                    ),
                ),
                (
                    "risk_tolerance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("aggressive", "Aggressive"),
                        ],
                        help_text="Risk tolerance level",
                        max_length=15,
                    ),
                ),
                (
                    "portfolio_size_range",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("small", "Up to 10K PLN"),
                            ("medium", "10K - 100K PLN"),
                            ("large", "100K - 1M PLN"),
                            ("institutional", "Over 1M PLN"),
                        ],
                        help_text="Approximate portfolio size",
                        max_length=20,
                    ),
                ),
                (
                    "dark_mode",
                    models.BooleanField(default=False, help_text="Use dark theme"),
                ),
                (
                    "compact_view",
                    models.BooleanField(
                        default=False, help_text="Use compact dashboard layout"
                    ),
                ),
                (
                    "show_tutorials",
                    models.BooleanField(
                        default=True, help_text="Show tutorial hints and tips"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
                "db_table": "user_profiles",
            },
        ),
        migrations.CreateModel(
            name="UserNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("sentiment", "Sentiment Alert"),
                            ("stock_mention", "Stock Mention"),
                            ("industry_news", "Industry News"),
                            ("market_impact", "Market Impact"),
                            ("system", "System Notification"),
                            ("custom", "Custom Alert"),
                        ],
                        default="system",
                        max_length=20,
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional notification data",
                    ),
                ),
                (
                    "related_stocks",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Stocks related to this notification",
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_notifications",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_read"],
                        name="user_notifi_user_id_ea6762_idx",
                    ),
                    models.Index(
                        fields=["notification_type"],
                        name="user_notifi_notific_17530c_idx",
                    ),
                    models.Index(
                        fields=["priority"], name="user_notifi_priorit_adac26_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("session_key", models.CharField(blank=True, max_length=40)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("login_time", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("logout_time", models.DateTimeField(blank=True, null=True)),
                ("pages_visited", models.IntegerField(default=0)),
                ("api_calls_made", models.IntegerField(default=0)),
                ("exports_performed", models.IntegerField(default=0)),
                (
                    "session_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional session metadata",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_sessions",
                "ordering": ["-login_time"],
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="user_sessio_user_id_bb1b83_idx",
                    ),
                    models.Index(
                        fields=["ip_address"], name="user_sessio_ip_addr_0626e4_idx"
                    ),
                ],
            },
        ),
    ]
