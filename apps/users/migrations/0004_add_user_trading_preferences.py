# Generated by Django 5.2 on 2025-07-24 14:03

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0005_scrapingschedule_scrapingexecution"),
        ("users", "0003_add_profile_fields"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserTradingPreferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "available_capital",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Available trading capital in PLN",
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(100)],
                    ),
                ),
                (
                    "target_profit_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("3.0"),
                        help_text="Target profit percentage per trade (0.5% - 50%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.5")),
                            django.core.validators.MaxValueValidator(Decimal("50.0")),
                        ],
                    ),
                ),
                (
                    "max_loss_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("2.0"),
                        help_text="Maximum acceptable loss per trade (0.5% - 20%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.5")),
                            django.core.validators.MaxValueValidator(Decimal("20.0")),
                        ],
                    ),
                ),
                (
                    "preferred_holding_time_hours",
                    models.IntegerField(
                        default=4,
                        help_text="Preferred holding time in hours (1-48 hours)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(48),
                        ],
                    ),
                ),
                (
                    "max_holding_time_hours",
                    models.IntegerField(
                        default=8,
                        help_text="Maximum holding time in hours (1-168 hours)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(168),
                        ],
                    ),
                ),
                (
                    "min_confidence_threshold",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("60.0"),
                        help_text="Minimum confidence required for signals (30% - 95%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("30.0")),
                            django.core.validators.MaxValueValidator(Decimal("95.0")),
                        ],
                    ),
                ),
                (
                    "max_position_size_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("10.0"),
                        help_text="Maximum percentage of capital per position (1% - 50%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1.0")),
                            django.core.validators.MaxValueValidator(Decimal("50.0")),
                        ],
                    ),
                ),
                (
                    "min_position_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("500.0"),
                        help_text="Minimum position value in PLN",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("100.0"))
                        ],
                    ),
                ),
                (
                    "min_daily_volume",
                    models.BigIntegerField(
                        default=10000,
                        help_text="Minimum daily volume for stock recommendations",
                        validators=[django.core.validators.MinValueValidator(1000)],
                    ),
                ),
                (
                    "min_market_cap_millions",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("100.0"),
                        help_text="Minimum market cap in millions PLN",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("10.0"))
                        ],
                    ),
                ),
                (
                    "trading_style",
                    models.CharField(
                        choices=[
                            ("conservative", "Conservative - Low risk, steady gains"),
                            ("moderate", "Moderate - Balanced risk/reward"),
                            ("aggressive", "Aggressive - Higher risk, higher rewards"),
                            ("scalping", "Scalping - Very short term, small gains"),
                            ("swing", "Swing Trading - Medium term positions"),
                        ],
                        default="moderate",
                        help_text="Preferred trading style",
                        max_length=20,
                    ),
                ),
                (
                    "market_conditions_preference",
                    models.CharField(
                        choices=[
                            ("bull_only", "Bull Market Only"),
                            ("bear_only", "Bear Market Only"),
                            ("all_conditions", "All Market Conditions"),
                            ("trending_only", "Trending Markets Only"),
                            ("range_bound", "Range-Bound Markets"),
                        ],
                        default="all_conditions",
                        help_text="Preferred market conditions for trading",
                        max_length=15,
                    ),
                ),
                (
                    "excluded_sectors",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Sectors to exclude from recommendations",
                    ),
                ),
                (
                    "notification_frequency",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate - All signals"),
                            ("hourly", "Hourly - Batched signals"),
                            ("daily", "Daily - Summary only"),
                            ("weekly", "Weekly - Summary only"),
                        ],
                        default="immediate",
                        help_text="How often to receive trading notifications",
                        max_length=15,
                    ),
                ),
                (
                    "max_signals_per_day",
                    models.IntegerField(
                        default=5,
                        help_text="Maximum number of signals per day",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "use_technical_analysis",
                    models.BooleanField(
                        default=True,
                        help_text="Include technical analysis in recommendations",
                    ),
                ),
                (
                    "use_fundamental_analysis",
                    models.BooleanField(
                        default=False,
                        help_text="Include fundamental analysis in recommendations",
                    ),
                ),
                (
                    "use_sentiment_analysis",
                    models.BooleanField(
                        default=True,
                        help_text="Include market sentiment in recommendations",
                    ),
                ),
                (
                    "allow_penny_stocks",
                    models.BooleanField(
                        default=False,
                        help_text="Allow recommendations for penny stocks (< 1 PLN)",
                    ),
                ),
                (
                    "allow_new_listings",
                    models.BooleanField(
                        default=False,
                        help_text="Allow recommendations for newly listed stocks",
                    ),
                ),
                (
                    "require_stop_loss",
                    models.BooleanField(
                        default=True,
                        help_text="Require stop-loss levels in all recommendations",
                    ),
                ),
                (
                    "track_performance",
                    models.BooleanField(
                        default=True,
                        help_text="Track and analyze recommendation performance",
                    ),
                ),
                (
                    "auto_adjust_preferences",
                    models.BooleanField(
                        default=False,
                        help_text="Automatically adjust preferences based on performance",
                    ),
                ),
                (
                    "preferred_sectors",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Preferred sectors/stocks for recommendations",
                        limit_choices_to={"is_active": True},
                        to="core.stocksymbol",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trading_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Trading Preferences",
                "verbose_name_plural": "Trading Preferences",
                "db_table": "users_trading_preferences",
                "abstract": False,
            },
        ),
    ]
