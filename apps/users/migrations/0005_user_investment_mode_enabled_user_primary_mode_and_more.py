# Generated by Django 5.2 on 2025-08-15 17:58

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0004_add_user_trading_preferences"),
    ]

    operations = [
        migrations.AddField(
            model_name="user",
            name="investment_mode_enabled",
            field=models.BooleanField(
                default=False, help_text="Enable long-term investment features"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="primary_mode",
            field=models.CharField(
                choices=[
                    ("trading", "Daily Trading"),
                    ("investing", "Long-term Investing"),
                    ("hybrid", "Both Trading & Investing"),
                ],
                default="trading",
                help_text="Primary user mode",
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="UserInvestmentPreferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "investment_horizon_months",
                    models.IntegerField(
                        default=12,
                        help_text="Investment horizon in months (3 months - 10 years)",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "risk_tolerance",
                    models.CharField(
                        choices=[
                            ("conservative", "Conservative - Low risk, steady growth"),
                            ("moderate", "Moderate - Balanced risk/return"),
                            ("aggressive", "Aggressive - Higher risk, higher returns"),
                            ("growth", "Growth Focused - Long-term growth"),
                            ("income", "Income Focused - Dividend income"),
                        ],
                        default="moderate",
                        help_text="Investment risk tolerance",
                        max_length=20,
                    ),
                ),
                (
                    "target_annual_return_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("8.0"),
                        help_text="Target annual return percentage (2% - 30%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("2.0")),
                            django.core.validators.MaxValueValidator(Decimal("30.0")),
                        ],
                    ),
                ),
                (
                    "max_drawdown_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("15.0"),
                        help_text="Maximum acceptable portfolio drawdown (5% - 50%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("5.0")),
                            django.core.validators.MaxValueValidator(Decimal("50.0")),
                        ],
                    ),
                ),
                (
                    "max_single_stock_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("10.0"),
                        help_text="Maximum allocation to single stock (2% - 50%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("2.0")),
                            django.core.validators.MaxValueValidator(Decimal("50.0")),
                        ],
                    ),
                ),
                (
                    "min_portfolio_stocks",
                    models.IntegerField(
                        default=10,
                        help_text="Minimum number of stocks in portfolio",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_portfolio_stocks",
                    models.IntegerField(
                        default=30,
                        help_text="Maximum number of stocks in portfolio",
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(200),
                        ],
                    ),
                ),
                (
                    "max_sector_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("25.0"),
                        help_text="Maximum allocation to single sector",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("10.0")),
                            django.core.validators.MaxValueValidator(Decimal("100.0")),
                        ],
                    ),
                ),
                (
                    "preferred_sectors",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of preferred sectors for investment",
                    ),
                ),
                (
                    "excluded_sectors",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of sectors to exclude from portfolio",
                    ),
                ),
                (
                    "investment_style",
                    models.CharField(
                        choices=[
                            ("value", "Value Investing - Undervalued stocks"),
                            ("growth", "Growth Investing - High growth potential"),
                            ("dividend", "Dividend Investing - Dividend-paying stocks"),
                            ("momentum", "Momentum Investing - Trending stocks"),
                            ("quality", "Quality Investing - High-quality companies"),
                            ("balanced", "Balanced - Mix of styles"),
                        ],
                        default="balanced",
                        help_text="Preferred investment style",
                        max_length=20,
                    ),
                ),
                (
                    "market_cap_preference",
                    models.CharField(
                        choices=[
                            ("large_cap", "Large Cap - Established companies"),
                            ("mid_cap", "Mid Cap - Medium-sized companies"),
                            ("small_cap", "Small Cap - Smaller companies"),
                            ("mixed", "Mixed - All sizes"),
                        ],
                        default="mixed",
                        help_text="Preferred company size",
                        max_length=15,
                    ),
                ),
                (
                    "esg_focus",
                    models.BooleanField(
                        default=False, help_text="Focus on ESG-compliant investments"
                    ),
                ),
                (
                    "exclude_tobacco",
                    models.BooleanField(
                        default=False, help_text="Exclude tobacco companies"
                    ),
                ),
                (
                    "exclude_gambling",
                    models.BooleanField(
                        default=False, help_text="Exclude gambling companies"
                    ),
                ),
                (
                    "exclude_alcohol",
                    models.BooleanField(
                        default=False, help_text="Exclude alcohol companies"
                    ),
                ),
                (
                    "exclude_weapons",
                    models.BooleanField(
                        default=False, help_text="Exclude weapons manufacturers"
                    ),
                ),
                (
                    "dividend_preference",
                    models.CharField(
                        choices=[
                            ("no_preference", "No Preference"),
                            ("dividend_growth", "Dividend Growth"),
                            ("high_yield", "High Dividend Yield"),
                            ("dividend_focus", "Dividend Focused Portfolio"),
                        ],
                        default="no_preference",
                        help_text="Dividend investment preference",
                        max_length=15,
                    ),
                ),
                (
                    "min_dividend_yield",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.0"),
                        help_text="Minimum dividend yield requirement (%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("15.0")),
                        ],
                    ),
                ),
                (
                    "rebalancing_frequency",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("semi_annual", "Semi-Annual"),
                            ("annual", "Annual"),
                            ("threshold_based", "When threshold exceeded"),
                        ],
                        default="quarterly",
                        help_text="Portfolio rebalancing frequency",
                        max_length=15,
                    ),
                ),
                (
                    "rebalancing_threshold",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("5.0"),
                        help_text="Rebalancing threshold percentage",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("2.0")),
                            django.core.validators.MaxValueValidator(Decimal("20.0")),
                        ],
                    ),
                ),
                (
                    "target_cash_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("5.0"),
                        help_text="Target cash allocation percentage",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("50.0")),
                        ],
                    ),
                ),
                (
                    "use_fundamental_analysis",
                    models.BooleanField(
                        default=True,
                        help_text="Use fundamental analysis for investment decisions",
                    ),
                ),
                (
                    "use_technical_analysis",
                    models.BooleanField(
                        default=False,
                        help_text="Use technical analysis for investment timing",
                    ),
                ),
                (
                    "use_quantitative_analysis",
                    models.BooleanField(
                        default=False,
                        help_text="Use quantitative models for stock selection",
                    ),
                ),
                (
                    "benchmark_index",
                    models.CharField(
                        choices=[
                            ("wig20", "WIG20 - Top 20 Polish stocks"),
                            ("wig", "WIG - Broad Polish market"),
                            ("mwig40", "mWIG40 - Mid-cap Polish stocks"),
                            ("swig80", "sWIG80 - Small-cap Polish stocks"),
                            ("custom", "Custom benchmark"),
                        ],
                        default="wig20",
                        help_text="Benchmark for performance comparison",
                        max_length=20,
                    ),
                ),
                (
                    "auto_invest_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable automatic investment suggestions",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="investment_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Investment Preferences",
                "verbose_name_plural": "Investment Preferences",
                "db_table": "users_investment_preferences",
                "abstract": False,
            },
        ),
    ]
