services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    environment:
      POSTGRES_DB: ${DB_NAME:-gpw_advisor_db}
      POSTGRES_USER: ${DB_USER:-gpw_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-gpw_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-gpw_user} -d ${DB_NAME:-gpw_advisor_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gpw_network

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gpw_network

  # Django Web Application
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - staticfiles_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "${WEB_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gpw_network

  # Celery Worker
  celery:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A gpw_advisor worker --loglevel=info --concurrency=2
    volumes:
      - ./logs:/app/logs
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - gpw_network

  # Celery Beat (Scheduler)
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A gpw_advisor beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - gpw_network

  # Nginx (Production reverse proxy)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - staticfiles_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - gpw_network

volumes:
  postgres_data:
  redis_data:
  staticfiles_volume:
  media_volume:

networks:
  gpw_network:
    driver: bridge
