"""
Django settings for gpw_advisor project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
env_file = BASE_DIR / '.env'
if env_file.exists():
    from decouple import Config, RepositoryEnv
    config = Config(RepositoryEnv(str(env_file)))
else:
    from decouple import config


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default="django-insecure-_p*2x#4#zqhfdf26%92_qav0e53_!+@@-!(zuy-*iq0q4_vqek")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third party apps
    "rest_framework",
    "django_celery_beat",
    
    # Project apps
    "apps.core.apps.CoreConfig",
    "apps.users.apps.UsersConfig",
    "apps.scrapers.apps.ScrapersConfig",
    "apps.analysis.apps.AnalysisConfig", 
    "apps.notifications.apps.NotificationsConfig",
    "apps.tracking.apps.TrackingConfig",
    "apps.dashboard.apps.DashboardConfig",
    "apps.news.apps.NewsConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "gpw_advisor.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "gpw_advisor.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME', default='gpw_advisor'),
        'USER': config('DATABASE_USER', default='postgres'),
        'PASSWORD': config('DATABASE_PASSWORD', default='password'),
        'HOST': config('DATABASE_HOST', default='localhost'),
        'PORT': config('DATABASE_PORT', default='5432', cast=int),
    }
}

# Auth User Model
AUTH_USER_MODEL = 'users.User'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Warsaw"  # Polish timezone for trading hours

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional locations of static files
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery Configuration
CELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Warsaw'
CELERY_ENABLE_UTC = True

# Celery Beat Configuration for Scheduled Tasks
CELERY_BEAT_SCHEDULE = {
    'run-scheduled-scrapers': {
        'task': 'apps.core.tasks.run_due_schedules_parallel',
        'schedule': 60.0,  # Run every 60 seconds (1 minute)
        'options': {
            'expires': 50.0,  # Task expires after 50 seconds if not picked up
        }
    },
    'detect-anomalies': {
        'task': 'apps.core.tasks.detect_anomalies_task',
        'schedule': 900.0,  # Run every 15 minutes (900 seconds)
        'options': {
            'expires': 300.0,  # Task expires after 5 minutes if not picked up
        }
    },
    'update-daily-trading-signals': {
        'task': 'apps.core.tasks.update_daily_trading_signals_task',
        'schedule': 1800.0,  # Run every 30 minutes (1800 seconds)
        'options': {
            'expires': 600.0,  # Task expires after 10 minutes if not picked up
        }
    },
    'ml-recommendation-feedback': {
        'task': 'apps.core.tasks.ml_recommendation_feedback_task',
        'schedule': 86400.0,  # Run once daily (24 hours = 86400 seconds)
        'options': {
            'expires': 1800.0,  # Task expires after 30 minutes if not picked up
        }
    },
    'price-based-trigger-analysis': {
        'task': 'apps.core.tasks.price_based_trigger_analysis_task',
        'schedule': 300.0,  # Run every 5 minutes (300 seconds) - more frequent for real-time analysis
        'options': {
            'expires': 240.0,  # Task expires after 4 minutes if not picked up
        }
    },
}
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN = config('TELEGRAM_BOT_TOKEN', default='')
TELEGRAM_API_URL = "https://api.telegram.org/bot"

# Trading Configuration
TRADING_HOURS_START = config('TRADING_HOURS_START', default='09:00')
TRADING_HOURS_END = config('TRADING_HOURS_END', default='17:30')
SCRAPING_INTERVAL_MINUTES = config('SCRAPING_INTERVAL_MINUTES', default=5, cast=int)
MAX_RETRY_ATTEMPTS = config('MAX_RETRY_ATTEMPTS', default=3, cast=int)
RETRY_DELAY_SECONDS = config('RETRY_DELAY_SECONDS', default=30, cast=int)

# Stock Market Configuration
# DEFAULT_STOCKS - DEPRECATED: Use StockSymbol.objects.filter(is_monitored=True) instead
# This hardcoded list has been replaced with database-driven monitoring configuration
# DEFAULT_STOCKS = [
#     'PKN', 'CDR', 'PKO', 'PZU', 'LPP', 'ALE', 'DNP', 'JSW', 
#     'OPL', 'PGE', 'KGH', 'SPL'
# ]

# Logging Configuration
# Ensure logs directory exists
import os
LOGS_DIR = BASE_DIR / 'logs'
os.makedirs(LOGS_DIR, exist_ok=True)

# Use console logging in Docker environment, file logging in development
USE_FILE_LOGGING = config('USE_FILE_LOGGING', default=False, cast=bool)

if USE_FILE_LOGGING:
    # File-based logging for development
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'file': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': LOGS_DIR / 'gpw_advisor.log',
                'formatter': 'verbose',
            },
            'ml_file': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': LOGS_DIR / 'ml_system.log',
                'formatter': 'verbose',
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
        },
        'loggers': {
            'gpw_advisor': {
                'handlers': ['file', 'console'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'apps': {
                'handlers': ['file', 'console'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'apps.analysis.ml_models': {
                'handlers': ['ml_file', 'console'],
                'level': 'INFO',
                'propagate': False,
            },
            'apps.analysis.ml_views': {
                'handlers': ['ml_file', 'console'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
else:
    # Console-only logging for Docker/production
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'gpw_advisor': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'apps': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'apps.analysis.ml_models': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'apps.analysis.ml_views': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }

# Login/Logout URLs
LOGIN_URL = '/users/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/users/login/'

# Session Configuration
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Email Configuration for Notifications
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@gpw-advisor.com')

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN = config('TELEGRAM_BOT_TOKEN', default='')

# Site Configuration
SITE_NAME = config('SITE_NAME', default='GPW Trading Advisor')
SITE_DOMAIN = config('SITE_DOMAIN', default='localhost:8001')